#!/usr/bin/env python3

import os
import sys
import json
import subprocess


def get_compile_commands_location():
    cwd = os.getcwd()
    possible_locations = ['.', 'build']

    while cwd != "/":
        for location in possible_locations:
            lookup = os.path.join(cwd, location, 'compile_commands.json')

            if os.path.isfile(lookup):
                return os.path.realpath(lookup)

        cwd = os.path.dirname(cwd)


def windows(seq, window_size):
    for i in range(len(seq) - window_size + 1):
        yield (i, seq[i: i + window_size])


def prettify_arguments(args):
    new_args = []

    ignored_flags_one = [
        '-c',
        '-Werror',
    ]
    ignored_flags_multi = [
        '-o',
    ]
    skip_next = False

    for _, arg in windows(args[1:-1], 2):
        if skip_next:
            skip_next = False
            continue

        if arg[0] in ignored_flags_multi:
            skip_next = True
            continue

        if arg[0] in ignored_flags_one:
            continue

        new_args.append(arg[0])

    return new_args


def get_compile_arguments(compile_commands, needed_file):
    with open(compile_commands, 'r', encoding='utf-8') as cmds:
        commands = json.load(cmds)

    for command in commands:
        file = os.path.realpath(os.path.join(
            command['directory'], command['file']))

        if file == needed_file:
            return (prettify_arguments(command['arguments']), command['directory'])

    return (None, None)


COMPILE_COMMANDS = get_compile_commands_location()

if not COMPILE_COMMANDS:
    sys.exit(0)

for filename in sys.argv[1:]:
    filename = os.path.realpath(filename)
    ARGS, DIR = get_compile_arguments(COMPILE_COMMANDS, filename)

    if not ARGS:
        continue

    ret = subprocess.run(['clang', '--analyze', *ARGS,
                         filename], check=False, cwd=DIR)
